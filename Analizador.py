# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re
import numpy as np

regex1 = re.compile(r"c")

regex2 = re.compile(r"(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T9),((?!T9).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T9),((?!T9).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T9),((?!T9).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T9),((?!T9).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T9),((?!T9).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T9),((?!T9).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T9),((?!T9).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T9),((?!T9).)*?(T15),")

regex3 = re.compile(r"(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T13),((?!T13).)*?(T7),((?!T7).)*?(T10)((?!T10).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T13),((?!T13).)*?(T7),((?!T7).)*?(T10)((?!T10).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T13),((?!T13).)*?(T7),((?!T7).)*?(T10)((?!T10).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T13),((?!T13).)*?(T7),((?!T7).)*?(T10)((?!T10).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T13),((?!T13).)*?(T7),((?!T7).)*?(T10)((?!T10).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T13),((?!T13).)*?(T7),((?!T7).)*?(T10)((?!T10).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T13),((?!T13).)*?(T7),((?!T7).)*?(T10)((?!T10).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T13),((?!T13).)*?(T7),((?!T7).)*?(T10)((?!T10).)*?(T16),")

regex4 = re.compile(r"(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T10),((?!T10).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T10),((?!T10).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T10),((?!T10).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T10),((?!T10).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T10),((?!T10).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T10),((?!T10).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T10),((?!T10).)*?(T0),((?!T0).)*?(T1),((?!T1).)*?(T3),((?!T3).)*?(T5),((?!T5).)*?(T10),((?!T10).)*?(16),")

regex5 = re.compile(r"(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T12),((?!T12).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T12),((?!T12).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T12),((?!T12).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T12),((?!T12).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T12),((?!T12).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T12),((?!T12).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T12),((?!T12).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T12),((?!T12).)*?(T16),")

regex6 = re.compile(r"(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T11),((?!T11).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T11),((?!T11).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T11),((?!T11).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T11),((?!T11).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T11),((?!T11).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T11),((?!T11).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T11),((?!T11).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T14),((?!T14).)*?(T8),((?!T8).)*?(T11),((?!T11).)*?(T15),")

regex7 = re.compile(r"(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T12),((?!T12).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T12),((?!T12).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T12),((?!T12).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T12),((?!T12).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T12),((?!T12).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T12),((?!T12).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T12),((?!T12).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T12),((?!T12).)*?(T16),")

regex8 = re.compile(r"(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T11),((?!T11).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T11),((?!T11).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T11),((?!T11).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T11),((?!T11).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T11),((?!T11).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T11),((?!T11).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T11),((?!T11).)*?(T0),((?!T0).)*?(T2),((?!T2).)*?(T4),((?!T4).)*?(T6),((?!T6).)*?(T11),((?!T11).)*?(T15),")

test_str = "T0,T1,T3,T5,T9,T0,T2,T4,T6,T11,T0,T1,T3,T0,T13,T2,T7,T4,T6,T10,T11,T0,T2,T4,T6,T11,T0,T1,T3,T15,T5,T9,T0,T1,T3,T5,T10,T0,T1,T3,T5,T10,T0,T2,T4,T6,T12,T0,T2,T4,T16,T6,T12,T0,T1,T3,T5,T9,T0,T2,T4,T6,T11,T0,T2,T4,T14,T8,T11,T0,T1,T3,T5,T9,T15,T0,T2,T4,T6,T12,T0,T2,T4,T6,T12,T0,T2,T4,T6,T11,T0,T2,T4,T0,T1,T14,T8,T3,T11,T0,T1,T5,T10,T3,T5,T9,T0,T1,T3,T16,T5,T10,T15,T0,T1,T3,T5,T10,T0,T2,T4,T6,T11,T0,T1,T3,T13,T0,T2,T7,T10,T4,T0,T2,T6,T11,T4,T6,T12,T0,T1,T3,T16,T13,T0,T1,T7,T10,T3,T0,T1,T13,T7,T9,T3,T0,T2,T5,T9,T4,T0,T14,T1,T15,T8,T3,T0,T2,T11,T5,T9,T4,T6,T12,T0,T1,T3,T13,T0,T2,T7,T9,T4,T0,T1,T6,T3,T11,T5,T10,T0,T1,T3,T15,T5,T9,T0,T1,T3,T13,T0,T1,T7,T10,T3,T5,T10,T0,T1,T3,T16,T13,T0,T1,T7,T10,T3,T5,T10,T0,T1,T3,T5,T9,T0,T2,T4,T14,T0,T1,T8,T11,T3,T13,T0,T1,T7,T9,T0,T3,T2,T5,T10,T15,T4,T0,T2,T14,T16,T8,T11,T4,T0,T2,T6,T11,T4,T6,T11,T0,T1,T3,T13,T0,T2,T7,T4,T14,T10,T0,T1,T8,T3,T0,T13,T12,T1,T7,T9,T3,T0,T5,T10,T2,T15,T4,T6,T12,T0,T2,T4,T14,T16,T0,T1,T8,T3,T5,T11,T10,T0,T2,T4,T6,T11,T0,T2,T4,T14,T0,T1,T8,T3,T12,T0,T1,T13,T7,T10,T3,T0,T1,T5,T10,T0,T1,T3,T16,T5,T10,T3,T0,T1,T13,T0,T1,T7,T9,T3,T5,T10,T3,T0,T2,T5,T10,T4,T0,T2,T14,T8,T12,T4,T0,T14,T2,T16,T8,T12,T4,T0,T1,T6,T11,T3,T13,T0,T1,T15,T7,T10,T3,T0,T2,T13,T0,T2,T7,T4,T14,T9,T0,T2,T8,T11,T4,T6,T12,T0,T2,T4,T14,T0,T2,T8,T11,T4,T6,T11,T0,T4,T1,T6,T3,T15,T5,T10,T0,T2,T12,T4,T14,T16,T0,T1,T8,T3,T11,T5,T10,T0,T1,T3,T5,T9,T0,T2,T4,T6,T12,T0,T2,T4,T6,T11,T0,T2,T4,T6,T12,T0,T1,T3,T5,T9,T16,T0,T2,T4,T15,T14,T0,T1,T8,T3,T11,T13,T0,T2,T7,T4,T9,T14,T0,T2,T8,T12,T4,T6,T12,T0,T2,T4,T6,T11,T0,T1,T3,T13,T0,T1,T7,T9,T0,T2,T4,T15,T14,T0,T2,T8,T11,T3,T0,T5,T2,T9,T4,T14,T0,T1,T8,T3,T12,T13,T0,T1,T7,T10,T4,T14,T0,T1,T16,T8,T3,T12,T0,T2,T13,T7,T4,T0,T6,T11,T2,T0,T1,T10,T4,T6,T12,T3,T5,T9,T3,T0,T13,T2,T15,T7,T4,T0,T1,T9,T14,T8,T11,T3,T0,T1,T5,T10,T3,T5,T10,T0,T2,T4,T16,T14,T0,T2,T8,T12,T4,T6,T12,T0,T1,T3,T5,T10,T0,T1,T3,T16,T5,T10,T0,T1,T3,T5,T9,T0,T1,T3,T5,T10,T0,T1,T3,T13,T0,T1,T7,T9,T3,T5,T9,T0,T1,T3,T15,T5,T9,T0,T2,T4,T6,T12,T0,T1,T3,T5,T9,T0,T1,T3,T5,T10,T0,T2,T4,T16,T14,T0,T2,T8,T12,T4,T6,T12,T0,T2,T4,T6,T12,T0,T2,T4,T14,T0,T1,T8,T12,T0,T2,T4,T16,T6,T3,T12,T13,T0,T1,T7,T9,T3,T0,T1,T5,T9,T3,T13,T15,T0,T2,T7,T4,T10,T0,T1,T6,T3,T13,T12,T0,T2,T7,T10,T4,T0,T2,T14,T16,T0,T1,T8,T11,T4,T0,T1,T6,T3,T5,T9,T3,T12,T0,T2,T13,T7,T10,T4,T0,T2,T14,T8,T11,T4,T14,T0,T1,T15,T8,T12,T3,T5,T9,T0,T2,T4,T6,T12,T0,T2,T4,T16,T6,T12,T0,T1,T3,T5,T9,T0,T2,T4,T14,T0,T1,T8,T3,T0,T11,T2,T5,T10,T4,T6,T12,T0,T2,T4,T14,T0,T1,T8,T3,T13,T11,T0,T2,T7,T10,T4,T6,T15,T12,T0,T2,T4,T16,T6,T12,T0,T2,T4,T6,T12,T0,T2,T4,T6,T11,T0,T2,T4,T6,T11,T0,T1,T3,T13,T0,T2,T7,T9,T4,T6,T11,T0,T1,T3,T5,T10,T15,T0,T2,T4,T6,T11,T16,T0,T2,T4,T14,T0,T1,T8,T12,T3,T5,T10,T0,T1,T3,T5,T10,T0,T1,T3,T5,T10,T0,T2,T4,T14,T16,T0,T1,T8,T12,T3,T13,T0,T1,T7,T10,T3,T0,T1,T5,T10,T3,T5,T9,T0,T1,T3,T5,T10,T0,T1,T3,T5,T10,T16,T0,T1,T3,T5,T9,T0,T1,T3,T13,T0,T2,T7,T10,T4,T0,T14,T1,T8,T11,T3,T0,T1,T13,T15,T7,T9,T3,T0,T2,T5,T4,T6,T9,T12,T0,T2,T4,T6,T12,T0,T1,T3,T5,T9,T16,T0,T1,T3,T5,T10,T0,T1,T3,T5,T10,T0,T2,T4,T6,T11,T0,T2,T4,T6,T11,T15,T0,T1,T3,T5,T9,T0,T1,T3,T13,T0,T2,T7,T10,T4,T14,T0,T2,T8,T11,T4,T0,T1,T6,T3,T12,T0,T1,T13,T16,T7,T9,T0,T2,T3,T5,T4,T15,T14,T9,T0,T1,T8,T3,T0,T11,T1,T5,T10,T3,T5,T10,T0,T2,T4,T14,T0,T1,T8,T12,T3,T13,T0,T2,T7,T4,T0,T6,T10,T1,T16,T11,T3,T0,T13,T1,T7,T10,T3,T0,T1,T5,T9,T3,T13,T0,T2,T15,T7,T4,T6,T12,T9,T0,T1,T3,T5,T10,T0,T2,T4,T6,T11,T0,T2,T4,T6,T11,T0,T1,T3,T5,T9,T0,T1,T3,T13,T15,T0,T1,T7,T10,T3,T5,T9,T0,T1,T3,T16,T5,T10,T0,T1,T3,T5,T9,T0,T1,T3,T5,T10,T0,T1,T3,T13,T0,T1,T7,T10,T3,T5,T10,T0,T2,T4,T16,T14,T0,T2,T8,T11,T4,T6,T11,T0,T1,T3,T5,T9,T15,T0,T2,T4,T6,T12,T0,T1,T3,T0,T2,T5,T4,T0,T1,T10,T14,T8,T3,T0,T2,T12,T13,T0,T2,T7,T9,T4,T6,T12,T4,T0,T14,T1,T16,T8,T12,T3,T0,T13,T2,T7,T10,T4,T0,T14,T1,T8,T3,T11,T0,T2,T13,T0,T1,T7,T9,T4,T6,T3,T0,T13,T11,T15,T2,T7,T10,T4,T14,T0,T2,T8,T12,T4,T0,T1,T6,T3,T16,T5,T12,T9,T0,T2,T4,T14,T0,T2,T8,T11,T4,T6,T11,T0,T1,T3,T13,T15,T0,T1,T7,T10,T3,T5,T9,T0,T1,T3,T5,T10,T0,T2,T4,T14,T0,T2,T8,T12,T4,T6,T0,T2,T12,T4,T16,T14,T0,T2,T8,T11,T4,T14,T0,T2,T8,T12,T4,T6,T11,T0,T2,T4,T6,T12,T0,T1,T3,T13,T0,T1,T7,T9,T0,T1,T3,T15,T5,T9,T3,T5,T9,T0,T1,T3,T13,T0,T2,T7,T9,T4,T14,T0,T1,T8,T12,T3,T13,T0,T1,T16,T7,T9,T0,T3,T2,T5,T4,T15,T6,T11,T10,T0,T2,T4,T6,T12,T0,T2,T4,T14,T0,T1,T8,T11,T3,T5,T10,T0,T1,T3,T5,T10,T0,T1,T3,T16,T5,T10,T0,T1,T3,T13,T0,T2,T7,T4,T10,T14,T0,T2,T8,T11,T4,T6,T12,T0,T2,T4,T14,T0,T1,T8,T3,T13,T12,T0,T2,T7,T9,T4,T16,T14,T0,T1,T15,T8,T11,T3,T5,T9,T0,T1,T3,T5,T9,T0,T2,T4,T6,T12,T0,T1,T3,T5,T9,T0,T2,T4,T15,T6,T12,T0,T1,T3,T13,T0,T2,T7,T9,T4,T6,T12,T0,T1,T3,T5,T10,T0,T1,T3,T13,T16,T0,T1,T7,T9,T3,T13,T0,T1,T7,T10,T3,T5,T10,T0,T2,T4,T14,T0,T2,T8,T11,T4,T6,T11,T0,T2,T4,T6,T11,T15,T0,T1,T3,T5,T9,T0,T1,T3,T5,T9,T0,T2,T4,T6,T11,T0,T1,T3,T15,T13,T0,T1,T7,T9,T3,T5,T10,T0,T1,T3,T5,T9,T0,T2,T4,T6,T12,T0,T1,T3,T16,T5,T9,T0,T2,T4,T14,T0,T2,T8,T11,T4,T6,T12,T0,T2,T4,T15,T6,T12,T0,T2,T4,T6,T11,T0,T2,T4,T6,T11,T0,T1,T3,T13,T0,T2,T7,T9,T4,T6,T12,T0,T2,T4,T14,T0,T2,T8,T12,T4,T6,T11,T0,T1,T16,T3,T15,T5,T9,T0,T2,T4,T6,T11,T0,T2,T4,T6,T12,T0,T1,T3,T5,T9,T0,T1,T3,T5,T10,T0,T1,T3,T13,T0,T1,T7,T10,T3,T13,T0,T2,T7,T10,T0,T4,T1,T14,T16,T0,T2,T8,T11,T4,T14,T0,T2,T15,T8,T3,T5,T11,T10,T4,T0,T1,T14,T0,T2,T8,T11,T3,T5,T10,T4,T0,T14,T2,T8,T11,T4,T0,T2,T6,T11,T0,T1,T3,T15,T5,T10,T4,T14,T0,T2,T8,T11,T4,T0,T1,T6,T3,T13,T12,T0,T1,T7,T9,T3,T16,T5,T9,T0,T2,T4,T14,T0,T1,T8,T3,T12,T13,T0,T1,T7,T9,T0,T3,T1,T5,T9,T3,T15,T5,T9,T0,T2,T4,T6,T12,T0,T2,T4,T6,T12,T0,T2,T4,T14,T0,T1,T8,T12,T3,T5,T0,T1,T9,T3,T16,T5,T10,T0,T2,T4,T6,T11,T0,T1,T3,T15,T13,T0,T1,T7,T9,T3,T5,T9,T0,T1,T3,T13,T0,T1,T7,T9,T3,T5,T10,T0,T2,T4,T14,T0,T1,T8,T3,T5,T9,T0,T11,T2,T4,T6,T11,T15,T0,T1,T3,T5,T9,T0,T1,T3,T5,T10,T0,T2,T4,T14,T0,T1,T8,T11,T3,T5,T9,T0,T1,T3,T15,T13,T0,T2,T7,T10,T0,T4,T1,T16,T6,T3,T11,T5,T9,T0,T1,T3,T5,T10,T0,T2,T4,T14,T0,T1,T8,T12,T3,T5,T9,T0,T2,T4,T14,T15,T0,T2,T8,T12,T4,T6,T12,T0,T1,T3,T5,T9,T16,T0,T2,T4,T14,T0,T1,T8,T11,T3,T5,T9,T0,T1,T3,T5,T10,T0,T1,T3,T13,T0,T2,T7,T4,T10,T14,T0,T2,T8,T11,T4,T6,T11,T0,T1,T3,T15,T13,T0,T2,T7,T4,T9,T14,T0,T1,T8,T11,T3,T0,T13,T2,T7,T4,T9,T0,T1,T6,T3,T11,T5,T10,T15,T0,T2,T4,T14,T0,T2,T8,T11,T4,T6,T11,T0,T2,T4,T14,T0,T1,T8,T3,T11,T5,T9,T0,T2,T4,T15,T14,T0,T2,T8,T12,T0,T1,T4,T16,T6,T3,T11,T13,T0,T1,T7,T10,T3,T0,T2,T5,T10,T4,T14,T0,T1,T8,T12,T3,T5,T9,T0,T2,T4,T14,T0,T1,T8,T12,T3,T5,T10,T0,T2,T4,T16,T14,T0,T1,T8,T11,T0,T2,T4,T15,T14,T0,T1,T8,T11,T3,T5,T10,T3,T0,T1,T13,T7,T9,T3,T0,T1,T5,T9,T3,T5,T9,T0,T1,T3,T5,T10,T15,T0,T1,T3,T13,T0,T1,T7,T9,T3,T5,T10,T0,T1,T3,T5,T9,T16,T0,T2,T4,T14,T0,T2,T8,T11,T4,T6,T11,T0,T1,T3,T13,T15,T0,T2,T7,T4,T6,T12,T10,T0,T1,T3,T13,T0,T2,T7,T9,T4,T14,T0,T2,T8,T11,T4,T14,T0,T2,T8,T11,T4,T0,T1,T6,T3,T5,T9,T0,T2,T12,T4,T6,T11,T15,T0,T1,T3,T5,T10,T0,T1,T3,T16,T5,T10,T0,T2,T4,T14,T0,T2,T8,T12,T4,T6,T12,T0,T1,T3,T5,T9,T0,T1,T3,T5,T9,T0,T1,T3,T5,T9,T0,T2,T4,T15,T14,T0,T1,T8,T11,T3,T5,T10,T0,T2,T4,T6,T11,T16,T0,T1,T3,T13,T0,T2,T7,T10,T4,T6,T11,T0,T1,T3,T13,T0,T2,T7,T10,T4,T6,T12,T0,T1,T3,T5,T10,T0,T2,T4,T16,T14,T0,T1,T8,T3,T12,T5,T9,T0,T1,T3,T5,T9,T15,T0,T1,T3,T13,T0,T1,T7,T9,T3,T5,T9,T0,T1,T3,T13,T0,T1,T7,T10,T3,T5,T10,T0,T1,T3,T13,T0,T1,T7,T9,T3,T5,T9,T0,T1,T3,T15,T5,T9,T0,T2,T4,T14,T0,T1,T8,T3,T5,T12,T0,T10,T1,T3,T5,T10,T16,T0,T1,T3,T5,T9,T0,T2,T4,T6,T12,T0,T2,T4,T14,T0,T1,T8,T11,T3,T5,T10,T0,T15,T1,T3,T16,T5,T0,T1,T10,T3,T5,T10,T0,T1,T3,T5,T10,T0,T1,T3,T13,T0,T2,T7,T10,T4,T6,T0,T11,T1,T3,T16,T13,T0,T2,T7,T4,T9,T14,T0,T2,T8,T11,T4,T6,T12,T0,T1,T3,T5,T9,T0,T2,T4,T15,T14,T0,T2,T8,T12,T4,T6,T12,T0,T2,T4,T6,T11,T0,T2,T4,T6,T12,T0,T2,T4,T16,T14,T0,T2,T8,T11,T4,T6,T11,T0,T1,T3,T13,T0,T1,T7,T10,T3,T5,T10,T0,T2,T4,T14,T0,T1,T8,T3,T5,T9,T0,T2,T11,T4,T6,T11,T15,T0,T2,T4,T6,T11,T0,T1,T3,T13,T0,T2,T7,T9,T4,T6,T11,T0,T2,T4,T15,T6,T11,T0,T2,T4,T6,T12,T0,T1,T3,T5,T9,T0,T2,T4,T14,T0,T2,T8,T11,T4,T14,T0,T1,T15,T8,T3,T12,T0,T5,T2,T9,T4,T16,T6,T11,T0,T1,T3,T5,T10,T0,T2,T4,T6,T12,T0,T1,T3,T5,T10,T0,T2,T4,T6,T12,T0,T1,T3,T16,T13,T0,T1,T7,T10,T3,T5,T9,T0,T1,T3,T5,T9,T0,T1,T3,T15,T13,T0,T1,T7,T10,T3,T5,T10,T0,T1,T3,T13,T0,T2,T7,T4,T6,T9,T11,T0,T2,T4,T14,T0,T1,T8,T11,T3,T13,T0,T1,T7,T9,T0,T3,T1,T15,T13,T0,T2,T7,T10,T3,T5,T9,T0,T2,T4,T16,T14,T0,T2,T8,T11,T4,T6,T12,T4,T0,T1,T6,T12,T3,T5,T10,T0,T2,T4,T6,T11,T0,T1,T3,T5,T10,T0,T1,T3,T16,T13,T0,T1,T7,T9,T3,T5,T10,T0,T2,T4,T15,T6,T11,T0,T1,T3,T13,T0,T1,T7,T9,T3,T5,T10,T0,T1,T3,T13,T0,T2,T7,T4,T9,T6,T12,T0,T2,T4,T14,T0,T2,T8,T11,T4,T6,T11,T0,T2,T4,T15,T6,T12,T0,T1,T3,T16,T13,T0,T1,T7,T10,T3,T5,T9,T0,T1,T3,T5,T9,T0,T1,T3,T5,T10,T0,T1,T3,T13,T0,T1,T7,T9,T0,T1,T3,T15,T13,T0,T2,T7,T4,T6,T12,T9,T3,T0,T2,T5,T10,T4,T6,T0,T11,T1,T3,T16,T5,T9,T0,T2,T4,T6,T11,T0,T2,T4,T14,T15,T0,T1,T8,T12,T3,T13,T0,T1,T7,T10,T3,T5,T9,T0,T1,T3,T13,T0,T2,T7,T9,T4,T6,T11,T0,T1,T3,T5,T10,T0,T1,T3,T5,T9,T0,T1,T3,T15,T13,T0,T1,T7,T9,T3,T5,T10,T0,T1,T3,T5,T10,T16,T0,T1,T3,T13,T0,T2,T7,T4,T10,T14,T0,T2,T8,T12,T4,T6,T11,T0,T2,T4,T6,T12,T0,T1,T3,T16,T13,T0,T2,T7,T4,T6,T9,T11,T0,T1,T3,T13,T15,T0,T1,T7,T10,T3,T5,T10,T0,T1,T3,T5,T10,T0,T2,T4,T6,T11,T0,T1,T3,T5,T10,T0,T1,T3,T16,T13,T0,T2,T7,T4,T9,T6,T11,T0,T1,T3,T5,T10,T0,T2,T4,T14,T0,T1,T8,T3,T13,T11,T0,T1,T7,T9,T3,T15,T5,T9,T0,T2,T4,T14,T0,T2,T8,T12,T4,T6,T12,T0,T1,T3,T5,T10,T0,T2,T4,T16,T14,T0,T1,T8,T3,T5,T12,T10,T0,T2,T4,T6,T11,T0,T1,T3,T5,T9,T0,T2,T4,T14,T15,T0,T1,T8,T12,T3,T5,T9,T0,T2,T4,T6,T12,T0,T2,T4,T16,T14,T0,T2,T8,T11,T4,T6,T12,T0,T1,T3,T5,T9,T0,T1,T3,T5,T9,T0,T2,T4,T15,T14,T0,T2,T8,T12,T4,T6,T12,T0,T2,T4,T6,T12,T0,T1,T3,T13,T16,T0,T2,T7,T4,T14,T9,T0,T2,T8,T12,T4,T6,T12,T0,T2,T4,T6,T11,T0,T1,T3,T13,T0,T2,T7,T10,T4,T14,T0,T2,T8,T11,T4,T6,T11,T0,T1,T3,T13,T15,T0,T2,T7,T4,T6,T11,T10,T0,T1,T3,T5,T10,T16,T0,T2,T4,T6,T11,T0,T2,T4,T6,T11,T0,T2,T4,T6,T12,T0,T1,T3,T5,T9,T0,T2,T4,T15,T14,T0,T1,T8,T3,T5,T10,T11,T0,T1,T3,T5,T9,T0,T1,T3,T5,T10,T0,T1,T3,T16,T13,T0,T1,T7,T10,T3,T5,T9,T0,T1,T3,T5,T9,T0,T1,T3,T15,T5,T9,T0,T2,T4,T14,T0,T2,T8,T12,T4,T14,T0,T2,T8,T11,T4,T6,T11,T0,T1,T3,T13,T0,T1,T7,T9,T0,T1,T3,T15,T5,T9,T3,T5,T9,T0,T2,T4,T14,T0,T1,T8,T12,T3,T5,T9,T0,T2,T4,T6,T12,T0,T2,T4,T14,T16,T0,T2,T8,T12,T4,T6,T11,T0,T1,T3,T5,T9,T15,T0,T1,T3,T13,T0,T2,T7,T4,T6,T11,T9,T0,T2,T4,T14,T0,T1,T8,T12,T3,T5,T9,T0,T1,T3,T5,T9,T15,T0,T1,T3,T5,T9,T0,T2,T4,T6,T12,T0,T1,T3,T13,T0,T1,T7,T10,T3,T5,T0,T2,T4,T10,T16,T6,T12,T0,T1,T3,T5,T9,T0,T2,T4,T14,T0,T2,T8,T12,T4,T6,T12,T0,T1,T3,T13,T16,T0,T1,T7,T10,T3,T5,T10,T0,T2,T4,T14,T0,T1,T8,T3,T13,T11,T0,T2,T7,T4,T9,T15,T6,T11,T0,T2,T4,T6,T11,T0,T1,T3,T13,T0,T1,T7,T9,T0,T1,T3,T15,T5,T10,T3,T5,T10,T0,T1,T3,T13,T16,T0,T1,T7,T9,T3,T5,T10,T0,T2,T4,T6,T12,T0,T1,T3,T5,T10,T0,T1,T3,T5,T10,T0,T2,T4,T16,T6,T11,T0,T1,T3,T5,T9,T0,T1,T3,T5,T9,T0,T2,T4,T15,T14,T0,T2,T8,T12,T4,T6,T12,T0,T1,T3,T5,T10,T0,T2,T4,T14,T0,T2,T8,T11,T4,T6,T11,T0,T2,T4,T6,T12,T0,T2,T4,T16,T14,T0,T2,T8,T11,T4,T6,T12,T0,T1,T3,T5,T10,T0,T2,T4,T6,T11,T0,T2,T4,T15,T6,T12,T0,T2,T4,T14,T0,T2,T8,T12,T4,T14,T0,T1,T16,T8,T3,T13,T12,T0,T1,T7,T9,T3,T0,T1,T5,T9,T3,T13,T0,T1,T7,T10,T3,T5,T10,T0,T1,T3,T13,T0,T2,T7,T9,T4,T14,T0,T1,T8,T3,T11,T5,T0,T1,T9,T3,T5,T10,T15,T0,T2,T4,T16,T14,T0,T2,T8,T12,T4,T6,T12,T0,T1,T3,T5,T10,T0,T1,T3,T13,T0,T2,T7,T10,T0,T4,T2,T16,T14,T0,T2,T8,T12,T4,T6,T11,T4,T0,T2,T6,T11,T4,T14,T0,T2,T8,T11,T0,T2,T4,T15,T14,T0,T1,T8,T12,T3,T13,T0,T1,T7,T9,T3,T5,T10,T4,T0,T2,T6,T11,T4,T6,T11,T0,T1,T3,T5,T10,T0,T1,T3,T16,T5,T10,T0,T2,T4,T6,T12,T0,T1,T3,T5,T10,T0,T2,T4,T14,T0,T1,T8,T3,T5,T10,T11,T0,T2,T4,T14,T16,T15,T0,T1,T8,T12,T3,T5,T10,T0,T2,T4,T6,T12,T0,T2,T4,T6,T11,T0,T1,T3,T13,T0,T2,T7,T9,T4,T14,T0,T1,T8,T3,T12,T13,T0,T1,T16,T7,T10,T3,T0,T1,T5,T10,T3,T13,T0,T1,T7,T9,T3,T5,T10,T0,T2,T4,T6,T12,T0,T1,T3,T16,T13,T0,T1,T7,T10,T3,T5,T9,T0,T2,T4,T6,T12,T15,T0,T2,T4,T6,T12,T0,T1,T3,T5,T9,T0,T1,T3,T5,T9,T0,T1,T3,T13,T0,T1,T7,T9,T3,T5,T9,T0,T1,T3,T13,T15,T0,T1,T7,T9,T3,T5,T9,T0,T1,T3,T13,T0,T1,T7,T10,T0,T2,T3,T16,T5,T4,T9,T6,T11,T0,T2,T4,T6,T11,T15,T0,T1,T3,T5,T9,T0,T2,T4,T14,T0,T1,T8,T11,T3,T13,T0,T1,T7,T9,T3,T5,T10,T0,T1,T3,T13,T15,T0,T2,T7,T9,T4,T14,T0,T2,T8,T12,T4,T6,T11,T0,T1,T3,T5,T9,T0,T1,T3,T13,T0,T1,T7,T10,T3,T5,T10,T0,T1,T3,T5,T10,T16,T0,T2,T4,T6,T12,T0,T1,T3,T5,T9,T0,T1,T3,T15,T5,T9,T0,T2,T4,T6,T12,T0,T2,T4,T6,T11,T0,T2,T4,T14,T0,T1,T8,T3,T5,T10,T11,T0,T1,T3,T13,T16,T0,T1,T7,T9,T3,T13,T0,T2,T15,T7,T9,T4,T14,T0,T1,T8,T12,T3,T0,T1,T5,T10,T3,T5,T10,T0,T2,T4,T6,T11,T0,T2,T4,T14,T0,T2,T8,T12,T0,T1,T4,T16,T14,T0,T1,T8,T3,T5,T9,T12,T3,T0,T2,T13,T7,T4,T9,T0,T2,T14,T15,T0,T1,T8,T3,T13,T12,T0,T1,T7,T9,T3,T5,T10,T4,T0,T1,T14,T0,T2,T8,T12,T4,T6,T3,T5,T11,T9,T0,T2,T4,T16,T6,T12,T0,T1,T3,T5,T9,T0,T2,T4,T15,T14,T0,T1,T8,T3,T13,T11,T0,T2,T7,T4,T9,T14,T0,T1,T8,T3,T0,T1,T11,T5,T9,T3,T5,T9,T0,T2,T4,T15,T6,T11,T0,T1,T3,T5,T10,T0,T2,T4,T6,T11,T0,T2,T4,T6,T11,T0,T2,T4,T15,T6,T11,T0,T1,T3,T5,T9,T0,T1,T3,T13,T0,T1,T7,T10,T3,T5,T9,T0,T2,T4,T6,T11,T0,T1,T3,T15,T13,T0,T1,T7,T9,T3,T5,T9,T0,T1,T3,T13,T0,T1,T7,T10,T3,T13,T0,T1,T16,T7,T10,T3,T5,T9,T0,T1,T3,T13,T0,T1,T7,T9,T0,T1,T3,T15,T5,T9,T3,T5,T9,T0,T2,T4,T6,T11,T0,T1,T3,T13,T0,T2,T7,T9,T4,T0,T6,T12,T1,T3,T15,T5,T10,T0,T1,T3,T13,T0,T2,T7,T9,T4,T6,T12,T0,T2,T4,T6,T12,T16,T0,T2,T4,T6,T11,T0,T2,T4,T6,T12,T0,T1,T3,T5,T10,T0,T2,T4,T6,T12,T0,T1,T3,T16,T13,T0,T2,T7,T4,T14,T9,T0,T1,T8,T11,T0,T3,T5,T2,T15,T4,T10,T6,T12,T0,T1,T3,T5,T9,T0,T1,T3,T5,T9,T0,T1,T3,T13,T0,T1,T7,T10,T3,T5,T10,T0,T1,T3,T5,T10,T16,T0,T2,T4,T6,T12,T0,T2,T4,T14,T0,T2,T8,T11,T4,T6,T11,T0,T2,T4,T6,T12,T15,T0,T1,T3,T5,T10,T0,T2,T4,T16,T14,T0,T2,T8,T11,T4,T6,T11,T0,T1,T3,T13,T0,T1,T7,T10,T3,T13,T0,T2,T7,T4,T10,T6,T11,T0,T1,T3,T13,T0,T2,T7,T4,T9,T14,T0,T1,T15,T8,T3,T12,T13,T0,T2,T7,T4,T0,T1,T10,T6,T12,T3,T5,T10,T0,T1,T3,T16,T13,T0,T2,T7,T10,T4,T14,T0,T2,T8,T12,T0,T4,T2,T16,T6,T12,T4,T6,T12,T0,T1,T3,T5,T9,T0,T2,T4,T14,T0,T1,T8,T3,T11,T5,T10,T0,T2,T4,T6,T12,T0,T1,T3,T16,T5,T9,T0,T1,T3,T5,T9,T0,T1,T3,T15,T13,T0,T1,T7,T9,T3,T5,T10,T0,T2,T4,T6,T12,T0,T2,T4,T6,T11,T0,T1,T3,T5,T9,T0,T1,T3,T13,T0,T2,T7,T9,T4,T6,T11,T0,T1,T3,T15,T5,T10,T0,T2,T4,T6,T12,T0,T2,T4,T16,T14,T0,T2,T8,T12,T4,T6,T11,T0,T2,T4,T14,T0,T2,T8,T12,T4,T6,T12,T0,T1,T3,T5,T10,T0,T2,T4,T16,T14,T0,T1,T8,T3,T13,T11,T0,T2,T7,T4,T10,T6,T11,T0,T2,T4,T6,T11,T15,T0,T2,T4,T6,T12,T0,T1,T3,T13,T0,T1,T7,T10,T3,T5,T10,T0,T1,T3,T5,T10,T16,T0,T1,T3,T5,T9,T0,T2,T4,T14,T0,T1,T8,T3,T13,T11,T0,T1,T7,T10,T3,T5,T9,T0,T1,T3,T13,T15,T0,T2,T7,T10,T4,T6,T11,T0,T2,T4,T6,T12,T0,T1,T3,T16,T13,T0,T2,T7,T9,T4,T6,T12,T0,T2,T4,T14,T0,T1,T8,T12,T3,T13,T0,T1,T7,T10,T3,T5,T9,T0,T2,T4,T6,T11,T0,T2,T4,T15,T14,T0,T1,T8,T3,T5,T11,T9,T0,T2,T4,T6,T11,T0,T2,T4,T6,T12,T0,T1,T3,T16,T5,T9,T0,T1,T3,T15,T5,T10,T0,T1,T3,T5,T9,T0,T2,T4,T6,T12,T0,T1,T3,T5,T9,T0,T2,T4,T6,T11,T0,T1,T3,T13,T0,T1,T7,T9,T3,T13,T0,T2,T15,T7,T9,T4,T6,T11,T0,T2,T4,T14,T0,T2,T8,T12,T4,T6,T11,T0,T2,T4,T6,T12,T0,T2,T4,T16,T14,T0,T2,T8,T11,T4,T14,T0,T1,T15,T8,T12,T3,T5,T10,T0,T1,T3,T5,T10,T0,T1,T3,T5,T10,T0,T1,T3,T16,T13,T0,T1,T7,T9,T3,T5,T10,T0,T2,T4,T6,T12,T0,T2,T4,T6,T12,T0,T1,T3,T5,T9,T0,T2,T4,T14,T0,T1,T8,T12,T3,T5,T9,T0,T2,T4,T16,T14,T0,T1,T8,T3,T5,T10,T11,T0,T1,T3,T13,T15,T0,T2,T7,T4,T6,T10,T11,T0,T1,T3,T5,T10,T0,T1,T3,T5,T9,T0,T1,T3,T5,T10,T0,T1,T3,T16,T5,T10,T0,T1,T3,T13,T0,T1,T7,T9,T3,T5,T10,T0,T2,T4,T14,T0,T1,T8,T11,T3,T13,T0,T2,T15,T7,T9,T4,T14,T0,T1,T8,T11,T3,T0,T2,T13,T7,T4,T9,T0,T1,T6,T11,T3,T0,T1,T13,T15,T7,T9,T3,T0,T2,T5,T10,T4,T14,T0,T2,T8,T11,T4,T6,T11,T0,T1,T3,T5,T9,T0,T1,T3,T15,T13,T0,T1,T7,T10,T3,T5,T9,T0,T1,T3,T16,T5,T9,T0,T1,T3,T13,T0,T1,T7,T9,T3,T5,T10,T0,T2,T4,T6,T11,T0,T1,T3,T15,T13,T0,T1,T7,T10,T3,T5,T9,T0,T1,T3,T13,T0,T2,T7,T4,T6,T11,T9,T0,T1,T3,T5,T10,T0,T1,T3,T5,T9,T0,T1,T3,T15,T13,T0,T1,T7,T9,T3,T5,T10,T0,T2,T4,T6,T12,T16,T0,T2,T4,T6,T11,T0,T1,T3,T13,T0,T1,T7,T10,T3,T5,T10,T0,T2,T4,T14,T0,T1,T8,T12,T3,T5,T9,T0,T1,T3,T16,T5,T9,T0,T2,T4,T15,T14,T0,T1,T8,T12,T3,T13,T0,T1,T7,T9,T3,T5,T10,T0,T1,T3,T5,T10,T0,T1,T3,T5,T9,T0,T2,T4,T6,T12,T0,T2,T4,T16,T6,T11,T0,T2,T4,T6,T11,T0,T1,T3,T15,T13,T0,T1,T7,T9,T3,T5,T10,T0,T1,T3,T13,T0,T2,T7,T4,T9,T6,T12,T0,T1,T3,T13,T0,T1,T7,T9,T3,T5,T9,T0,T1,T3,T5,T9,T15,T0,T1,T3,T5,T10,T0,T1,T3,T13,T0,T1,T7,T10,T3,T5,T0,T2,T9,T4,T16,T6,T12,T0,T1,T3,T5,T9,T0,T1,T3,T5,T10,T0,T2,T4,T6,T12,T0,T2,T4,T14,T0,T2,T8,T12,T0,T2,T4,T16,T14,T0,T1,T8,T12,T3,T5,T9,T4,T0,T1,T14,T15,T0,T1,T8,T3,T12,T5,T10,T3,T13,T0,T2,T7,T9,T4,T0,T2,T6,T11,T4,T6,T11,T0,T2,T4,T14,T0,T2,T8,T12,T0,T1,T4,T16,T6,T12,T3,T5,T9,T0,T2,T4,T6,T11,T15,T0,T2,T4,T14,T0,T2,T8,T11,T4,T6,T12,T0,T1,T3,T5,T10,T0,T2,T4,T6,T12,T0,T1,T3,T16,T13,T0,T1,T7,T10,T3,T5,T10,T0,T1,T3,T5,T9,T0,T1,T3,T5,T9,T0,T1,T3,T15,T13,T0,T1,T7,T9,T3,T5,T9,T0,T1,T3,T5,T10,T0,T1,T3,T5,T9,T0,T1,T3,T13,T0,T2,T7,T9,T4,T14,T0,T1,T15,T8,T11,T3,T13,T0,T2,T7,T4,T9,T0,T6,T2,T12,T0,T2,T4,T14,T16,T0,T2,T8,T11,T4,T6,T11,T4,T0,T2,T6,T11,T4,T6,T11,T15,T0,T1,T3,T13,T0,T2,T7,T10,T4,T14,T0,T1,T8,T3,T5,T10,T11,T0,T2,T4,T14,T0,T1,T8,T12,T3,T13,T0,T1,T7,T9,T3,T13,T0,T1,T15,T7,T9,T3,T0,T2,T5,T10,T4,T6,T11,T0,T1,T3,T16,T5,T9,T0,T2,T4,T14,T0,T1,T8,T3,T11,T13,T0,T1,T15,T7,T9,T3,T5,T9,T0,T2,T4,T6,T11,T0,T1,T3,T5,T9,T0,T1,T3,T5,T10,T15,T0,T1,T3,T13,T0,T1,T7,T9,T3,T5,T10,T0,T1,T3,T5,T9,T0,T1,T3,T5,T9,T0,T1,T3,T13,T0,T1,T7,T10,T3,T5,T10,T0,T1,T3,T5,T10,T16,T0,T1,T3,T5,T9,T0,T2,T4,T15,T14,T0,T1,T8,T3,T12,T5,T9,T0,T2,T4,T6,T12,T0,T1,T3,T13,T0,T1,T7,T10,T0,T1,T3,T16,T13,T0,T1,T7,T9,T3,T5,T10,T3,T0,T2,T5,T4,T6,T10,T11,T0,T1,T3,T5,T10,T0,T2,T4,T14,T0,T2,T8,T11,T4,T6,T11,T0,T2,T4,T15,T6,T11,T0,T2,T4,T14,T0,T1,T8,T11,T3,T5,T10,T0,T2,T4,T14,T16,T0,T2,T8,T11,T4,T14,T0,T2,T15,T8,T12,T4,T6,T11,T0,T2,T4,T6,T12,T0,T1,T3,T5,T10,T0,T2,T4,T6,T12,T0,T2,T4,T16,T14,T0,T2,T8,T12,T4,T6,T12,T0,T1,T3,T5,T9,T0,T1,T3,T5,T9,T0,T1,T3,T13,T0,T2,T7,T9,T0,T1,T4,T15,T14,T0,T1,T8,T11,T3,T5,T10,T3,T0,T1,T13,T7,T10,T3,T0,T1,T5,T9,T3,T5,T9,T16,T0,T1,T3,T5,T9,T0,T2,T4,T15,T14,T0,T1,T8,T12,T3,T5,T9,T0,T2,T4,T14,T0,T1,T0,T2,T8,T3,T11,T13,T0,T1,T7,T4,T9,T6,T3,T11,T5,T0,T1,T10,T3,T13,T15,T0,T2,T7,T9,T4,T6,T12,T0,T2,T4,T6,T11,T0,T2,T4,T6,T11,T0,T2,T4,T6,T12,T0,T1,T3,T16,T5,T10,T0,T1,T3,T13,T0,T2,T7,T9,T4,T6,T12,T0,T1,T3,T15,T13,T0,T2,T7,T10,T4,T6,T11,T0,T1,T3,T5,T9,T0,T1,T3,T5,T9,T0,T2,T4,T6,T12,T0,T2,T4,T16,T14,T0,T1,T8,T11,T3,T0,T1,T5,T9,T3,T15,T13,T0,T1,T7,T9,T3,T5,T10,T0,T2,T4,T14,T0,T2,T8,T11,T4,T6,T11,T0,T1,T3,T5,T9,T15,T0,T1,T3,T13,T0,T1,T7,T10,T3,T5,T10,T0,T2,T4,T6,T11,T0,T2,T4,T14,T0,T1,T8,T11,T3,T13,T0,T2,T7,T4,T14,T10,T0,T1,T8,T11,T16,T3,T0,T2,T5,T9,T4,T15,T14,T0,T1,T8,T11,T3,T13,T0,T2,T7,T4,T0,T9,T1,T14,T8,T3,T0,T2,T11,T5,T9,T4,T0,T1,T14,T15,T8,T3,T11,T0,T1,T13,T0,T1,T7,T9,T3,T5,T10,T3,T13,T0,T1,T7,T9,T3,T0,T2,T5,T4,T10,T6,T12,T15,T0,T1,T3,T5,T9,"


def testFunc(match,case):
    #generate a editable string array
    newString = np.zeros(len(match.group(0)),dtype='object')
    for i in range (0,len(match.group(0))):
        newString[i] = match.group(0)[i]

    # reference index and case_val
    firs_index = match.start(1)
    switcher = {
                1: 98,
                2: 82,
                3: 98,
                4: 82,
                5: 98,
                6: 98,
                7: 82,
                8: 82
                }
    max = switcher.get(case)

    #replace invariant N`1
    val = 1
    while(val < max):
        index1 = match.start(val)-firs_index
        index2 = match.end(val)-firs_index
        for j in range (index1,index2):
            newString[j] = '_'
        val = val + 2

    #generate a new string to return
    separator = ''
    resultado = separator.join(newString)

    print("######################")
    print(case)
    print("######################")
    return resultado

def merger(cadena1,cadena2):
    #generate a editable string array
    newString1 = np.zeros(len(cadena1),dtype='object')
    newString2 = np.zeros(len(cadena2),dtype='object')
    for i in range (0,len(cadena1)):
        newString1[i] = cadena1[i]
        newString2[i] = cadena2[i]

    #merge 
    resultado = np.zeros(len(cadena1),dtype='object')
    for i in range (0,len(cadena1)):
        if(newString1[i] == '_' or newString2[i] == '_'):
            resultado[i] = '_'
        else:
            resultado[i] = newString1[i]


    #generate a new string to return
    separator = ''
    resultado_fin = separator.join(resultado)
    return  resultado_fin        

loop = 0
test_str_aux = test_str
while(loop<10):
    print("vuelta", loop)
    test_str_aux = re.sub(regex1,lambda m: testFunc(match=m,case=1),test_str_aux)
    test_str_aux = re.sub(regex2,lambda m: testFunc(match=m,case=2),test_str_aux)
    test_str_aux = re.sub(regex3,lambda m: testFunc(match=m,case=3),test_str_aux)
    test_str_aux= re.sub(regex4,lambda m: testFunc(match=m,case=4),test_str_aux)
    test_str_aux= re.sub(regex5,lambda m: testFunc(match=m,case=5),test_str_aux)
    test_str_aux= re.sub(regex6,lambda m: testFunc(match=m,case=6),test_str_aux)
    test_str_aux= re.sub(regex7,lambda m: testFunc(match=m,case=7),test_str_aux)
    test_str_aux= re.sub(regex8,lambda m: testFunc(match=m,case=8),test_str_aux)
    loop = loop +1

#test_1 = re.sub(regex1,lambda m: testFunc(match=m,case=1),test_str)
#test_2 = re.sub(regex1,lambda m: testFunc(match=m,case=1),test_1)
#test_3 = re.sub(regex1,lambda m: testFunc(match=m,case=1),test_2)
#test_2 = re.sub(regex2,lambda m: testFunc(match=m,case=2),test_str)
#test_3 = re.sub(regex3,lambda m: testFunc(match=m,case=3),test_str)
#test_4 = re.sub(regex4,lambda m: testFunc(match=m,case=4),test_str)
#test_5 = re.sub(regex5,lambda m: testFunc(match=m,case=5),test_str)
#test_6 = re.sub(regex6,lambda m: testFunc(match=m,case=6),test_str)
#test_7 = re.sub(regex7,lambda m: testFunc(match=m,case=7),test_str)
#test_8 = re.sub(regex8,lambda m: testFunc(match=m,case=8),test_str)



#resul_1 = merger(test_1,test_2)
#resul_2 = merger(resul_1,test_3)
#resul_3 = merger(resul_2,test_4)
#resul_4 = merger(resul_3,test_5)
#resul_5 = merger(resul_4,test_6)
#resul_6 = merger(resul_5,test_7)
#resul_7 = merger(resul_6,test_8)
#print(resul_7)

print(test_str_aux)




