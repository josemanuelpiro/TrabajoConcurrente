import Monitor.Monitor;
import Monitor.Task;
import java.io.FileNotFoundException;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                      MAIN CLASS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public class Main {

    public static void main(String[] arg) throws FileNotFoundException {
        final int LAST_TRANSITION = 15;

        final int NUMBER_OF_THREADS = 15;
        final int NUMBER_OF_TASKS_TYPE = 15;
        final int NUMBER_OF_TASKS = 1000;
        final int INFINITE_TASK_NUMBER = 0;

        //------------------------------------------------
        //specials transitions
        final int FIRST_TRANSITION = 0;

        final int TRANS_DOUBLE_1_1 = 7;
        final int TRANS_DOUBLE_1_2 = 13;

        final int TRANS_DOUBLE_2_1 = 8;
        final int TRANS_DOUBLE_2_2 = 14;

        final int VACIADO_1 = 15;
        final int VACIADO_2 = 16;

        final int[] REGULAR_TRANSITIONS = {1, 2, 3, 4, 5, 6, 9, 10, 11, 12};

        //****************************************************
        //build monitor
        Monitor monitor = new Monitor();
        //build tasks array
        Task[] tasks = new Task[NUMBER_OF_TASKS_TYPE];
        //build threads array
        Thread[] threads = new Thread[NUMBER_OF_THREADS];
        //****************************************************
        /*
        Task testTask = new Task(new int[]{0,1,3,5,9,0,1,3,13,7,10,0,1,3,15,5,9,0,1,3,5,10,0,1,3,5,10,16,0,1,3,5,9,11,0,
                1,3,5,9,15,0,1,3,0,1,5,10,3,5,9,0,1,3,16,5,10,15,0,1,3,5,10,16,0,1,3,0,1,13,7,9,3,5,9,0,1,15,3,5,9,9,0,1
                ,3,5,0,1,3,5,9,0,1,10,3,5,16,0,1,10,3,5,0,1,3,5,9,0,1,9,3,5,15,16,11,0,1,9,3,5,15,0,1,3,5,10,0,1,3,0,1,13,
                7,10,3,0,1,5,10,0,1,3,16,5,10,3,0,1,13,0,1,7,9,3,5,10,3,5,10,16,0,1,3,13,0,1,15,7,10,3,13,7,9,0,1,3,15,5,
                10,0,1,3, 5,10,0,1,3,5,9, 0,1,3,5,9,16, 15, 0,1, 3, 13, 7, 9, 12, 0,1,3,13,0,1,7,9,0,2,4,15,14, 8, 3, 5,
                9, 0,1, 3, 13,0,1,7,10, 0,1, 3, 13,7, 0,1,10, 3,5,9,3,0,13,2, 7,4,0,1,9,14,8, 3,0,1,5,10,3,5,10, 16, 12,
                16, 0,1,3,5,9, 0,1,3,13,0,1,7,9,3,5,9,0,1,3,15,5,9, 0,1,3,5,9, 16, 0,1, 16, 3, 13, 7,9, 0,1, 9,3,13,15, 7,
                10,0,1, 3,13, 7, 16, 9, 0,1,15, 3,5,9, 16, 0,1,3,5, 10, 0,1, 3,13, 7, 15, 0,1, 3,5,10,0,1,3,5,10,0,1,3,5,10,
                0,1, 10,3,0,1,5,10,3,5,9,0,1,3,5,10,0,1,3,5,10,16,0,1,3,5, 0,1,3,13, 7,10, 0,1, 15, 9,3, 5, 9, 0,1,3,5,9,
                16,0,1,3,5,10,0,1,3,5,10, 0,1,3,5, 0,1,3,13, 7,10, 0,1, 16, 9, 3,5, 15, 0,1, 3,0, 1,5,10,3,5,10, 0,1, 3,13,
                7, 0, 10,1,16, 3,0,13,1,7,10,3, 5,9, 0,2,15, 4,6, 9,0,1,3,5,10, 0,1,3,5, 0,1, 10,3,5,9,0,1,3,16,5,10,0,1,3,5,
                0,1,3,5,10, 0,1, 10,3,5,10, 16, 11, 0,1,3,5, 0,1,3, 5, 0,1,10, 3, 13, 7,9, 0, 1,16, 3, 13, 7,10, 0, 1, 3, 13,0,
                1,7,9, 3, 13, 15, 7,10, 0,1, 3, 5, 9, 0,1,3,13,15,0,1,7,10,3,5,9,0,1,3,5,10,0,2,4,14, 8,12, 16, 0,1,3,13,0,1,7,
                9,0,1,3,15,5,9,3,5,9,0,1,3,13, 7,9, 0,1, 3,13,0,1,16,7,9, 3, 5, 15, 10, 0,1, 3,5,10,0,1,3,5,10,0,1,3,16,5,10,0,
                1,3,13, 7, 10, 0,1, 3,13, 7,9, 16, 0,1,15, 3,5,9, 15, 10,0,1,3,13, 7, 0,1, 10,3,5,10, 15, 0,1, 3,5,10, 16,
                15, 15, 0,1,3,5, 0,1,3,5,10,0,1,3,13,0,1,7,10,3,13, 7,10,0, 1, 16,0,2, 4,14, 8,3,5,11,10, 0,1, 3,5,10, 11,
                0,1, 9,3,16,5, 0,1, 9,0,3,1,5,9,3,15,5,9, 0,2,4,6, 0,1, 3,5, 16, 15, 0,1, 9,3,5, 9, 0,1, 3,5, 0,1,3,5,9,
                9,0,1,3,15,13, 7, 0, 1,16, 3, 5,9, 0,1, 3,5,9, 15, 0,1,3,5,9,16, 0,1, 3,5,9, 10,0,1,3,13, 7, 0,1,3, 13, 7,
                9, 0,1, 3, 13, 7, 9, 15, 0,1, 3, 5,9, 0,1, 3,11,13,0,1,7,10,3, 5,10, 0,1, 3,5,9, 0,1, 15, 3,0,1,13,7,9,3,
                5,9, 9, 15, 10, 16, 0,1,3,13,15, 7, 16, 0,1,3,5, 15, 10, 16,0,1,3,13, 7,10, 15, 0,1, 3,5, 0,1, 10,3,5,10,
                9, 0,1,3, 5, 0,1, 3,5, 0,10,1,3,5,10, 0,1,3,5, 0,1, 3,5,10,0,15,1,3,16,5,0,1,10,3,5,10,0,1,3,5,10, 10, 16,
                9, 0,2, 4,6, 0,1,3,5, 12, 0,2,4,6, 0,1, 10,3,5,10, 0,1, 3,5, 15, 12,0,1,3,5,9, 0,1,15, 3, 5, 9, 16, 0,1,3,
                5,10, 0,1,3,5,10,0,2,4,6, 16, 0,1, 10,3,5, 0,1,3,5, 0,1,3,15,13,0,1,7,10,3,5,10, 9,0, 1, 10,3,5, 16, 0,1,
                3,5,10, 0,1,3,5,10, 10, 0,2, 4, 6, 11, 15, 16, 0,1, 3,5, 0,1,3,5, 9, 16, 15, 0,1,3,5, 15, 10, 16, 15,0,1,
                10,3,5,10, 11, 16, 9, 15, 16, 0,1, 3,5, 15, 15, 10, 16, 15, 0,1,3,5, 0,1,3,5, 16, 16, 0,1, 3,13, 7, 0,1, 9,
                15, 3,5, 16, 9, 16, 0,1,3,5,9,0,1,3,5,9, 16, 0,1,3,5, 15, 0,1,16, 3,13, 7,9, 9, 0,1, 3,5, 9, 0,1, 3, 5, 9,
                15, 0,2, 4,6, 0,1,3,13, 7, 11, 15, 0,1, 3,13, 7,9, 15, 0,1,3,13, 7,9, 0,1, 3, 13,0,1, 7,10,3,0,1,5,10,3,13,
                0,1,7,9,3,5,10, 16, 0,1, 10,3,5,9, 15,0,2,4,6, 0,1,3,5,9,0,1,3,5, 0,1, 9,3,5, 15,0,1, 9,3,5, 0,1, 10, 3,16,
                5, 9, 15,0,1,3,5, 0,1, 3,5,10, 9, 0,1,3,5, 0,1, 10,3,5,10,0,1,3,5,10,16, 0,1,3,5,9,0,1,3, 5, 0,1, 3,5,10,
                16,0,1, 3,13, 7,9, 0,1, 3,0,1,5,10,3,5,10, 12,0,1, 16, 0,1, 3,5,9, 3, 13,7, 9, 15,0,1, 3,13, 0,1,7,9,3,5,
                10, 0,1, 3,5, 9, 16, 0,1,3,5,9, 15, 0,1, 3,13, 7, 9, 0,1, 3,0,1, 5,9,3,5,9, 15, 0,1,3,5,10, 15, 0,1,3,5,9,
                0,1,3,13,0,1,7,10,3,5,9, 0,1,3,15,13,0,1,7,9,3,5,9,0,1,3,13,0,1,7,10,3,13,0,1,16,7,10,3,5,9, 0,1, 9,0,1,3,
                15,5,9,3,5, 0, 1,3, 5,10, 0,1,3,5,10, 16, 9,0,1, 3,5, 15, 10, 0,1,3,5,9,0,1,3,5, 0,1,3,13,0,1,7,10,3,5,10,
                0,1,3,5,10, 0,2, 4,6, 15,0,1,3,5,10, 16, 11, 0,1,3,13,0,1,7,10,3,13, 7, 10, 0,1,15, 3, 13, 7, 0,1,10, 3,5,
                10, 16, 10, 0,1,3,5,9, 0,1, 3, 5,10, 0,1,3,16,5,9,0,1,3,5, 15, 0,1, 9,3,5,10, 0,1,3,5, 0,1,3, 5,10, 16, 0,1,
                3,5,10, 16, 10, 0,1, 10,3,5,10,0,1,3,5,10,16,0,1,3,5, 0,1, 3,5, 15, 10, 0,1, 10,3,5,9, 0,1,3,15,5, 15, 0,2,
                4,6, 16, 0,1,15, 3,5,10, 10, 16, 0,1, 3,5, 16, 10, 15, 0,1,3,5, 16, 9, 0,1,3, 5, 0,1, 3,5,10, 0,1, 10,3,5,
                9,0,1,3,5,10,0,1,3,5, 15, 0,1, 3,5,10, 16, 0,1, 10,3,5, 16, 0,1, 3,13, 7, 9, 0,1,3,15,13, 7,9, 0,1,3,13, 7,
                9, 15, 0,1,3,13, 7, 16, 12, 16, 9, 0,1, 3,5,9, 15, 0,2, 4,6,12, 0,2,4,6, 16, 0,1, 3,5, 0,1,3,5,9,0,1,3,5,9,
                15, 0,1, 9,3,5,9,0,1,3,5, 9,0,1,3,13, 7,9, 0,1,15, 3,13,0,2,7,4,9, 6, 16, 11, 0,1, 3,5, 11, 9, 0,1,15, 9,3,
                5, 0,1,3, 5,9, 0,1,15, 9,3,5,9, 15, 0,1, 3,5, 0,1, 10,3,5, 0,1,3,5, 16, 15, 9,0,2,4,6, 0,1, 0,1, 3,5,10,3,
                5, 10, 0,1,3,5,10, 15, 0,1, 3,5, 0,2,15, 4,6, 0,1,3,5,10, 0,2,4, 14, 8,12, 12, 9,0,1,3,13, 7, 0,1, 0,1,
                3,5,10,3,0,1,13,7,10,3, 5,9, 16, 0,2,4, 14, 8, 0,1, 3, 13, 7, 9, 0,1,10,3,13, 7, 16, 10,0,1,3,13, 7, 0,1,3,
                15,13, 7,10, 0,2,4, 14, 8, 0,1, 3, 13,0,1,7,9,3,5,10, 11, 0,1,3,5,9,15,0,1,3,13,0,1,7,10,3,5,10, 0,1, 3,
                13,0,2,7,4,14,10,0,1,8, 16,3, 5,9, 0,1, 3,13, 7, 0,9,1, 3,0,2, 5,9,4,0,1,14, 8,3,11,0,1,13,0,1,7,9,3,5,10,
                3,13,0,1,7,9,3,0,2,5,4,10,6,12,15,0,1,3,5,9},monitor,INFINITE_TASK_NUMBER);

        Thread testThread = new Thread(testTask);
        testThread.start();
        */
        //assign task and started
        tasks[FIRST_TRANSITION] = new Task(new int[]{FIRST_TRANSITION}, monitor, NUMBER_OF_TASKS);
        threads[FIRST_TRANSITION] = new Thread(tasks[FIRST_TRANSITION],"Actival-R");
        threads[FIRST_TRANSITION].start();

        //----------------------------------------------------------
        //Procesadar T2P1 y FinalizarT2P1
        tasks[1] = new Task(new int[]{TRANS_DOUBLE_1_2, TRANS_DOUBLE_1_1}, monitor, INFINITE_TASK_NUMBER);
        threads[1] = new Thread(tasks[1], "Proc-fin-21");
        threads[1].start();

        //----------------------------------------------------------
        //Procesar T2P2 y Finaliar T2P2
        tasks[2] = new Task(new int[]{TRANS_DOUBLE_2_2, TRANS_DOUBLE_2_1}, monitor, INFINITE_TASK_NUMBER);
        threads[2] = new Thread(tasks[2], "Proc-fin-22");
        threads[2].start();

        //----------------------------------------------------------
        //Vaciado 1
        tasks[3] = new Task(new int[]{VACIADO_1}, monitor, INFINITE_TASK_NUMBER);
        threads[3] = new Thread(tasks[3],"Vaciado-1");
        threads[3].start();
        //----------------------------------------------------------
        //Vaciado 2
        tasks[4] = new Task(new int[]{VACIADO_2}, monitor, INFINITE_TASK_NUMBER);
        threads[4] = new Thread(tasks[4],"Vaciado-2");
        threads[4].start();

        for(int i = 5 ; i < LAST_TRANSITION ; i++){
            tasks[i] = new Task(new int[]{REGULAR_TRANSITIONS[i-5]}, monitor, INFINITE_TASK_NUMBER);
            threads[i] = new Thread(tasks[i],"Regular-" + (REGULAR_TRANSITIONS[i-5]));
            threads[i].start();
        }

        try{
            Thread.sleep(15000);
            monitor.closeLog();
            System.exit(0);
        }catch (InterruptedException e){
            e.printStackTrace();
        }
    }
}


